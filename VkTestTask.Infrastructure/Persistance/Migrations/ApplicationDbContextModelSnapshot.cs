// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VkTestTask.Infrastructure.Persistance;

#nullable disable

namespace VkTestTask.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VkTestTask.Domain.AggregateModels.UserAggregate.Entities.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("user_groups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("996f41e9-1c72-4320-900a-0ff55297094f"),
                            Code = "Admin",
                            Description = "Описание роли пользователя 'Admin'."
                        },
                        new
                        {
                            Id = new Guid("b5795342-a7e7-418f-b500-dea8b6c7224d"),
                            Code = "User",
                            Description = "Описание роли пользователя 'User'."
                        });
                });

            modelBuilder.Entity("VkTestTask.Domain.AggregateModels.UserAggregate.Entities.UserState", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("user_states", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("af524889-170b-4cb2-94c0-6831a14c3d25"),
                            Code = "Active",
                            Description = "Описание статуса пользователя 'Active'."
                        },
                        new
                        {
                            Id = new Guid("72c6bb19-9995-4433-8e25-344dfd82f0d4"),
                            Code = "Blocked",
                            Description = "Описание статуса пользователя 'Blocked'."
                        });
                });

            modelBuilder.Entity("VkTestTask.Domain.AggregateModels.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("login");

                    b.Property<Guid>("UserGroupId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_group_id");

                    b.Property<Guid>("UserStateId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_state_id");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("UserGroupId");

                    b.HasIndex("UserStateId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("VkTestTask.Domain.AggregateModels.UserAggregate.User", b =>
                {
                    b.HasOne("VkTestTask.Domain.AggregateModels.UserAggregate.Entities.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VkTestTask.Domain.AggregateModels.UserAggregate.Entities.UserState", "UserState")
                        .WithMany()
                        .HasForeignKey("UserStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("VKTestTask.Domain.AggregateModels.UserAggregate.ValueObjects.Password", "Password", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("password");

                            b1.HasKey("UserId");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Password")
                        .IsRequired();

                    b.Navigation("UserGroup");

                    b.Navigation("UserState");
                });
#pragma warning restore 612, 618
        }
    }
}
